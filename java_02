数组
是引用类型
整形数组：
int[] ns = new int[5] ；申请5个空间，后续赋值
或者
int[] ns = new int[] {18，2，3，1，1}；
定义时初始化，编译器自动计算长度大小

数组初始化后大小不可变；
数组只能按索引顺序存取。

在集合类collection中，有list，set，map

===============
泛型就是定义一种模板，例如ArrayList<T>，然后在代码中为用到的类创建对应的ArrayList<类型>

既实现了编写一次，万能匹配，又通过编译器保证了类型安全：这就是泛型。

ArrayList<String> strList = new ArrayList<String>();


在Java标准库中的ArrayList<T>实现了List<T>接口，它可以向上转型为List<T>：

List<String> list = new ArrayList<String>();

可以省略编译器能自动推断出的类型，例如：List<String> list = new ArrayList<>();；

使用ArrayList时，如果不定义泛型类型时，泛型类型实际上就是Object
把泛型参数<T>替换为需要的class类型，例如：ArrayList<String>，ArrayList<Number>等；

不指定泛型参数类型时，编译器会给出警告，且只能将<T>视为Object类型；

可以在接口中定义泛型类型，实现此接口的类必须实现正确的泛型类型。


List：一种有序列表的集合，例如，按索引排列的Student的List；
Set：一种保证没有重复元素的集合，例如，所有无重复名称的Student的Set；
Map：一种通过键值（key-value）查找的映射表集合，例如，根据Student的name查找对应Student的Map。

Map<K, V>是一种键-值映射表，当我们调用put(K key, V value)方法时，就把key和value做了映射并放入Map。
当我们调用V get(K key)时，就可以通过key获取到对应的value。如果key不存在，则返回null。
和List类似，Map也是一个接口，最常用的实现类是HashMap。

Map中不存在重复的key，因为放入相同的key，只会把原有的key-value对应的value给替换掉。

public class Main {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();
        map.put("apple", 123);//添加关联key:apple , value 123
        map.put("pear", 456);//添加关联key:pear, value 456
        System.out.println(map.get("apple")); // get取值
    }
}

对Map来说，要遍历key可以使用for each循环遍历Map实例的keySet()方法返回的Set集合，它包含不重复的key的集合：
public class Test{
public static void main(String[] args){
  Map<String, Integer> map = new HashMap<>();
  map.put("ab",123);
  map.put("qq", 456);
  for(String i : map.keySet()){
  System.out.println(map.get(i))
  }
}
}

使用List时，我们要关注List接口的规范。List接口允许我们添加重复的元素，即List内部的元素可以重复.
List还允许添加null：
public class Main {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("apple"); // size=1
        list.add(null); // size=2
        list.add("pear"); // size=3
        String second = list.get(1); // null
        System.out.println(second);
    }
}


创建List
除了使用ArrayList和LinkedList，我们还可以通过List接口提供的of()方法，根据给定元素快速创建List
但是List.of()方法不接受null值，如果传入null，会抛出NullPointerException异常。
List<Integer> list = List.of(1, 2, 5);


遍历List
public For_List{
  public static void main(String[] args){
    List<Integer> test = List.of(1,3,66);
    for(Integer i : test){
        System.out.println(i);
    }
   }
}
